Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_KAP_Property_Ability_For_Making(14);
DB_KAP_Property_Ability_For_Additional(17);

DB_KAP_LaboratorySet(DEC_Laboratory_Flask_Glass_Installation_A_Empty_A_7c5d74dc-9bc2-4ea4-9691-dce888154941);


// Check list Original Recipes
// I + E = V
// I + 2E = V
// I + E + E = V
// 2I + E = V
// 2I + 2E = V
// I + I + 2E = V
// 1I + 2I + 2E = V
// 2I + 1E + 2E = V
// I + I + E + E = V
// I + I + I + E + E + E = V
// 2I + 2I + 2E + 2E = V
// 3I + 3I + 3I + 3E + 3E + 3E = V
// 3I + 2I + 1I + 3E + 2E + 1E = V
// 3I + I + I + I + 3E + E + E + E = V
// 
// Check list Original Recipes
// h + h = V
// h + 2h = V
// 2h + 1h = V
// 2h + 2h = V
// (h + h) + (h + h) = V
// 2g + (g + 2h) = V
// 3super + (1super + 1g + 6h) = V
// 4super + (1super + 3g + 6h) = 
KBSECTION
// CLEANING
IF
RequestCanCombine(_Player,_Lab,_Slot1,_,_,_,_RequestID)
AND
GetStatString(_Lab, _LabStat)
AND
_LabStat == "OBJ_Laboratory_Installation"
AND
QRY_KAP_Clear_Old_Variables()
THEN
DB_NOOP(1);
//
// ERRORS
//
// ERROR LOW INTELLIGENCE OR WISDOM
IF
RequestCanCombine(_Player,_Lab,_Slot1,_,_,_,_RequestID)
AND
GetStatString(_Lab, _LabStat)
AND
_LabStat == "OBJ_Laboratory_Installation"
AND
GetStatString(_Slot1, _Slot1Stat)
AND
_Slot1Stat == "OBJ_Laboratory_Glass"
AND
DB_KAP_Property_Ability_For_Making(_Level)
AND
NOT QRY_KAP_PlayerAbilityLevelIsRequired(_Player,_Level)  // Intelligence or Wisdom+Druid
THEN
DB_Singleton("DB_KAP_StartCombined_Error",1);
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_INTELLIGENCE_LOW_FOR_ALCHEMY", 6.0, 1);
//
// SLOT 1 IS EMPTY
IF
RequestCanCombine(_Player,_Lab,_Slot1,_,_,_,_RequestID)
AND
GetStatString(_Lab, _LabStat)
AND
_LabStat == "OBJ_Laboratory_Installation"
AND
GetStatString(_Slot1, _Slot1Stat)
AND
_Slot1Stat == "OBJ_Laboratory_Glass"
AND
IsInventoryEmpty(_Slot1,1)
THEN
DB_Singleton("DB_KAP_StartCombined_Error",1);
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_EMPTY_SLOT", 6.0, 1);
//
// SLOT 2 IS EMPTY
IF
RequestCanCombine(_Player,_Lab,_,_Slot2,_,_,_RequestID)
AND
GetTemplate(_Lab, _LabTemplate)
AND
DB_KAP_LaboratorySet(_LabTemplate)
AND
GetStatString(_Slot2, _Slot2Stat)
AND
_Slot2Stat == "OBJ_Laboratory_Glass"
AND
IsInventoryEmpty(_Slot2,1)
THEN
DB_Singleton("DB_KAP_StartCombined_Error",1);
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_EMPTY_SLOT", 6.0, 1);
//
//
// ITERATE SLOTS
IF
RequestCanCombine(_Player,_Lab,_Slot1,_Slot2,_Slot3,_,_RequestID)
AND
GetTemplate(_Lab, _LabTemplate)
AND
DB_KAP_LaboratorySet(_LabTemplate)
AND
GetStatString(_Slot1, _Slot1Stat)
AND
_Slot1Stat == "OBJ_Laboratory_Glass"
AND
GetStatString(_Slot2, _Slot2Stat)
AND
_Slot2Stat == "OBJ_Laboratory_Glass"
AND
GetStatString(_Slot3, _Slot3Stat)
AND
_Slot1Stat == "OBJ_Laboratory_Glass"
AND
NOT DB_Singleton("DB_KAP_StartCombined_Error",1)
THEN
//SetDualEntityEvent(_Player,_Player,"START RequestCanCombine");
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_Slot3);
IterateInventory(_Slot1,"KAP_Collect_Ingredients_Slot1","KAP_Collect_Ingredients_Slot1_Finish");


// -----------------------------------------------------------------------------------------
// COLLECT_AND_SPENT_INGREDIENTS
// We go through the inventory of slots one by one and collect available ingredients into the base. 
// -----------------------------------------------------------------------------------------
//REGION COLLECT_AND_SPENT_INGREDIENTS
//
// ITERATE SLOTS
// Iterate Slot1
IF
EntityEvent((ITEM)_Item,"KAP_Collect_Ingredients_Slot1")
AND
DB_KAP_Current_Lab_Slots(_Slot1,_,_)
AND
GetTemplate(_Item,(ITEMROOT)_ItemTemplate)
AND
QRY_KAP_IsMainIngredient_OnceClear()
AND
QRY_KAP_IsMainIngredient(_ItemTemplate)
AND
GetStackAmount(_Item, _Amount,_)
AND
GUIDToString(_ItemTemplate,_ItemTemplateGUID)
AND
GetStatString(_Item, _ItemStat)
AND
QRY_KAP_Available_Ingredients_Add(_Slot1,_Amount,_ItemTemplate,_ItemTemplateGUID,_ItemStat)
THEN
DB_NOOP(1);
//
QRY
QRY_KAP_IsMainIngredient_OnceClear()
THEN
NOT DB_OnlyOnce("QRY_KAP_IsMainIngredient_Once");
//
QRY
QRY_KAP_IsMainIngredient((ITEMROOT)_ItemTemplate)
AND
DB_KAP_Recipes(_,_,_ItemTemplate,_) // There is the main ingredient.
AND
NOT DB_OnlyOnce("QRY_KAP_IsMainIngredient_Once")
THEN
DB_OnlyOnce("QRY_KAP_IsMainIngredient_Once");
// 
// Check a catalyst
IF
EntityEvent((ITEM)_Item,"KAP_Collect_Ingredients_Slot1")
AND
GetTemplate(_Item,(ITEMROOT)_ItemTemplate)
AND
DB_KAP_CatalystTemplate(_ItemTemplate)
AND
NOT DB_KAP_CatalystForRemove(_)
THEN
//SetDualEntityEvent(_Item,_Item,"Catalyst registered");
DB_KAP_CatalystForRemove(_ItemTemplate);
//
// Finish Slot1, go to Slot2
IF
EntityEvent(_,"KAP_Collect_Ingredients_Slot1_Finish")
AND
SysCount("DB_KAP_AvailableIngredients",6,_Amount)
AND
_Amount > 0 // If there are no ingredients in the first slot, then there is no point in checking further.
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
THEN
DB_Singleton("DB_KAP_MainIngredientsAmount",_Amount);
IterateInventory(_Slot2,"KAP_Collect_Ingredients_Slot2","KAP_Collect_Ingredients_Slot2_Finish");
//
IF
EntityEvent(_,"KAP_Collect_Ingredients_Slot1_Finish")
AND
GetHostCharacter(_Player)
AND
NOT DB_KAP_AvailableIngredients(_,_,_,_,_,_)
THEN
DB_Singleton("DB_KAP_StartCombined_Error",1);
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_NOT_COMBINE", 6.0, 1);
//
// Iterate Slot2
IF
EntityEvent((ITEM)_Item,"KAP_Collect_Ingredients_Slot2")
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
GetTemplate(_Item,(ITEMROOT)_ItemTemplate)
AND
GUIDToString(_ItemTemplate,_ItemTemplateGUID)
AND
QRY_KAP_IsSecondIngredient_OnceClear()
AND
QRY_KAP_IsSecondIngredient(_ItemTemplate,_ItemTemplateGUID)
AND
GetStackAmount(_Item, _Amount,_)
AND
GetStatString(_Item, _ItemStat)
AND
QRY_KAP_Available_Ingredients_Add(_Slot2,_Amount,_ItemTemplate,_ItemTemplateGUID,_ItemStat)
THEN
//SetDualEntityEvent(_Slot2,_Slot2,"KAP_Collect_Ingredients_Slot2 ITERATE");
DB_NOOP(1);
//
QRY
QRY_KAP_IsSecondIngredient_OnceClear()
THEN
NOT DB_OnlyOnce("QRY_KAP_IsSecondIngredient_Once");
//
QRY
QRY_KAP_IsSecondIngredient((ITEMROOT)_ItemTemplate,(STRING)_ItemTemplateGUID)
AND
DB_KAP_Affinities(_,_ItemTemplate,_,_,_,_) // There is the second ingredient.
AND
NOT DB_OnlyOnce("QRY_KAP_IsSecondIngredient_Once")
THEN
DB_OnlyOnce("QRY_KAP_IsSecondIngredient_Once");
//
QRY
QRY_KAP_IsSecondIngredient((ITEMROOT)_ItemTemplate,(STRING)_ItemTemplateGUID)
AND
DB_KAP_Recipe_Ingredients(_,_ItemTemplate,_) // There is the second ingredient.
AND
NOT DB_OnlyOnce("QRY_KAP_IsSecondIngredient_Once")
THEN
DB_OnlyOnce("QRY_KAP_IsSecondIngredient_Once");
//
QRY
QRY_KAP_IsSecondIngredient((ITEMROOT)_ItemTemplate,(STRING)_ItemTemplateGUID)
AND
DB_KAP_Affinities_GUIDString(_,_GUIDPattern,_) // There is the second ingredient.
AND
IsSubstring(_ItemTemplateGUID,_GUIDPattern,1)
AND
NOT DB_OnlyOnce("QRY_KAP_IsSecondIngredient_Once")
THEN
DB_OnlyOnce("QRY_KAP_IsSecondIngredient_Once");
//
// Finish Slot2, go to Slot3
//
IF
EntityEvent(_,"KAP_Collect_Ingredients_Slot2_Finish")
AND
GetHostCharacter(_Player)
AND
SysCount("DB_KAP_AvailableIngredients",6,_AvailableIngredientsAmount)
AND
DB_Singleton("DB_KAP_MainIngredientsAmount",_MainIngredientsAmount)
AND
_AvailableIngredientsAmount <= _MainIngredientsAmount
THEN
DB_Singleton("DB_KAP_StartCombined_Error",1);
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_NOT_COMBINE", 6.0, 1);
//
IF
EntityEvent(_,"KAP_Collect_Ingredients_Slot2_Finish")
AND
GetHostCharacter(_Player)
AND
QRY_KAP_RecipeMatched_OnceClear()
AND
NOT QRY_KAP_RecipeMatched()
THEN
DB_Singleton("DB_KAP_StartCombined_Error",1);
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_NOT_COMBINE", 6.0, 1);
//
//
QRY
QRY_KAP_RecipeMatched_OnceClear()
THEN
NOT DB_OnlyOnce("QRY_KAP_RecipeMatched_Once");
//
QRY
QRY_KAP_RecipeMatched()
AND
NOT DB_OnlyOnce("QRY_KAP_RecipeMatched_Once")
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
DB_KAP_AvailableIngredients(_,_Slot1,_,_ItemTemplate,_,_) //
AND
DB_KAP_Recipes(_,_,_ItemTemplate,_ComboCategory) // There is a recipe for the main ingredient.
AND
DB_KAP_Affinities(_ComboCategory,_ExtractTemplate,_,_,_,_)
AND
DB_KAP_AvailableIngredients(_,_Slot2,_,_ExtractTemplate,_,_)
AND
NOT DB_OnlyOnce("QRY_KAP_RecipeMatched_Once")
THEN
DB_OnlyOnce("QRY_KAP_RecipeMatched_Once");
//
QRY
QRY_KAP_RecipeMatched()
AND
NOT DB_OnlyOnce("QRY_KAP_RecipeMatched_Once")
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
DB_KAP_AvailableIngredients(_,_Slot1,_,_ItemTemplate,_,_) //
AND
DB_KAP_Recipes(_,_,_ItemTemplate,_ComboCategory) // There is a recipe for the main ingredient.
AND
DB_KAP_Recipe_Ingredients(_ComboCategory,_ExtractTemplate,_)
AND
DB_KAP_AvailableIngredients(_,_Slot2,_,_ExtractTemplate,_,_)
AND
NOT DB_OnlyOnce("QRY_KAP_RecipeMatched_Once")
THEN
DB_OnlyOnce("QRY_KAP_RecipeMatched_Once");
//
QRY
QRY_KAP_RecipeMatched()
AND
NOT DB_OnlyOnce("QRY_KAP_RecipeMatched_Once")
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
DB_KAP_AvailableIngredients(_,_Slot1,_,_ItemTemplate,_ItemTemplateGUID,_) //
AND
DB_KAP_Recipes(_,_,_ItemTemplate,_ComboCategory) // There is a recipe for the main ingredient.
AND
DB_KAP_Affinities_GUIDString(_ComboCategory,_GUIDPattern,_) // 
AND
DB_KAP_AvailableIngredients(_,_Slot2,_,_,_ExtractTemplateGUID,_)
AND
IsSubstring(_ExtractTemplateGUID,_GUIDPattern,1)
AND
NOT DB_OnlyOnce("QRY_KAP_RecipeMatched_Once")
THEN
DB_OnlyOnce("QRY_KAP_RecipeMatched_Once");
//
//
IF
EntityEvent(_,"KAP_Collect_Ingredients_Slot2_Finish")
AND
SysCount("DB_KAP_AvailableIngredients",6,_AvailableIngredientsAmount)
AND
DB_Singleton("DB_KAP_MainIngredientsAmount",_MainIngredientsAmount)
AND
_AvailableIngredientsAmount > _MainIngredientsAmount // If after checking the second slot there are no more available ingredients than the main ones, then there is no point in going further
AND
QRY_KAP_RecipeMatched_OnceClear()
AND
QRY_KAP_RecipeMatched()
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_Slot3)
THEN
IterateInventory(_Slot3,"KAP_Collect_Ingredients_Slot3","KAP_Collect_Ingredients_Slot3_Finish");
//
// Iterate Slot3
IF
EntityEvent((ITEM)_Item,"KAP_Collect_Ingredients_Slot3")
AND
DB_KAP_Current_Lab_Slots(_,_,_Slot3)
AND
GetTemplate(_Item,(ITEMROOT)_ItemTemplate)
AND
GetStackAmount(_Item, _Amount,_)
AND
GUIDToString(_ItemTemplate,_ItemTemplateGUID)
AND
GetStatString(_Item, _ItemStat)
AND
QRY_KAP_Available_Ingredients_Add(_Slot3,_Amount,_ItemTemplate,_ItemTemplateGUID,_ItemStat)
THEN
DB_NOOP(1);
//
// Finish Slot3
IF
EntityEvent(_,"KAP_Collect_Ingredients_Slot3_Finish")
THEN
DB_Singleton("DB_KAP_Collect_Ingredients_Slot3_Finish",1);
//
//
// ADD INGREDIENTS TO BASE
// Existed ingredients
QRY
QRY_KAP_Available_Ingredients_Add((ITEM)_Slot,(INTEGER)_Amount,(ITEMROOT)_ItemTemplate,(STRING)_ItemTemplateGUID,(STRING)_ItemStat)
AND
DB_KAP_AvailableIngredients(_Index,_Slot,_CollectedAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat)
AND
IntegerSum(_CollectedAmount, _Amount, _NewAmount)
THEN
//SetDualEntityEvent(_Slot,_Slot,"QRY_KAP_Available_Ingredients_Add EXIST");
NOT DB_KAP_AvailableIngredients(_Index,_Slot,_CollectedAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat);
DB_KAP_AvailableIngredients(_Index,_Slot,_NewAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat);
// 
// New ingredients
QRY
QRY_KAP_Available_Ingredients_Add((ITEM)_Slot,(INTEGER)_Amount,(ITEMROOT)_ItemTemplate,(STRING)_ItemTemplateGUID,(STRING)_ItemStat)
AND
NOT DB_KAP_AvailableIngredients(_,_Slot,_,_ItemTemplate,_ItemTemplateGUID,_ItemStat)
AND
Random(100000,_RandomIndex)
THEN
//SetDualEntityEvent(_Slot,_Slot,"QRY_KAP_Available_Ingredients_Add NEW");
DB_KAP_AvailableIngredients(_RandomIndex,_Slot,_Amount,_ItemTemplate,_ItemTemplateGUID,_ItemStat);
//

//END_REGION

//
//
// ERRORS - REMOVE _LabCombinedResult
IF
Combined(_Lab,_,_,_,_,_Player,_LabCombinedResult)
AND
GetTemplate(_Lab, _LabTemplate)
AND
DB_KAP_LaboratorySet(_LabTemplate)
AND
DB_Singleton("DB_KAP_StartCombined_Error",1)
THEN
RequestDelete((ITEM)_LabCombinedResult);
//
//
//
// START
IF
Combined(_Lab,_Slot1,_Slot2,_Slot3,_,_Player,_LabCombinedResult)
AND
GetTemplate(_Lab, _LabTemplate)
AND
DB_KAP_LaboratorySet(_LabTemplate)
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_Slot3)
AND
DB_Singleton("DB_KAP_Collect_Ingredients_Slot3_Finish",1)
AND
NOT DB_Singleton("DB_KAP_StartCombined_Error",1)
THEN
//SetDualEntityEvent(_Player,_Player,"START COMBINED");
DB_KAP_Current_Lab(_Lab,_Player,_Slot3);
PROC_KAP_Start_Potion_Making(); 
PROC_KAP_Try_Create_Result();
PROC_KAP_Try_Remove_Spented();
ObjectTimerLaunch(_LabCombinedResult, "KAP_DeleteLabCombinedResult_Timer", 5);
//
//
// GENERAL FUNCTIONS FOR ALL TYPES OF RECIPES
//
// START POTION MAKING
//
// COMMONLY KNOWN RECIPES WITHOUT REQUIREMENTS
PROC
PROC_KAP_Start_Potion_Making()
AND
DB_KAP_Current_Lab_Slots(_Slot1,_,_)
AND
DB_KAP_AvailableIngredients(_ItemIndex,_Slot1,_Amount,_ItemTemplate,_ItemTemplateGUID,_ItemStat) // Let's go through the main ingredients
AND
DB_KAP_Recipes(_RecipeName,_Result,_ItemTemplate,_ComboCategory) // There is a recipe for the main ingredient.
AND 
IsSubstring(_ComboCategory,"ALCH_Affinity",1) // We remove recipes from books that are not publicly available
AND
QRY_KAP_Clear_MainIngredientProcess() // Clear old main ingredient if present
AND
DB_Singleton("DB_KAP_MainIngredientsProcessedCount",_AmountProcessed)
AND
IntegerSum(_AmountProcessed,1,_AmountProcessedNew) // Counting the processed ingredients
THEN
//SetDualEntityEvent(_Slot1,_Slot1,"PROC_KAP_Start_Potion_Making AFFINITY");
DB_Singleton("DB_KAP_MainIngredientsProcessedCount",_AmountProcessedNew);
DB_KAP_MainIngredientProcess(_Result,_ItemIndex,_ItemTemplate,_ComboCategory); // We send the main ingredient for processing
//
//
// CHECK KNOWN AND REQUIREMENTS FOR RECIPES FROM BOOKS
PROC
PROC_KAP_Start_Potion_Making()
AND
DB_KAP_Current_Lab_Slots(_Slot1,_,_Slot3)
AND
DB_KAP_AvailableIngredients(_ItemIndex,_Slot1,_Amount,_ItemTemplate,_ItemTemplateGUID,_ItemStat) // Let's go through the main ingredients
AND
DB_KAP_Recipes(_RecipeName,_Result,_ItemTemplate,_ComboCategory) // There is a recipe for the main ingredient.
AND 
NOT IsSubstring(_ComboCategory,"ALCH_Affinity",1)
AND
DB_KAP_Recipes_Books(_,_RecipePattern,_) 
AND 
IsSubstring(_RecipeName,_RecipePattern,1) // For recipes from books 
AND
QRY_KAP_RecipeCheckKnownAndRequirements(_RecipePattern) // check requirements
AND
QRY_KAP_Clear_MainIngredientProcess() // Clear old main ingredient if present
AND
DB_Singleton("DB_KAP_MainIngredientsProcessedCount",_AmountProcessed)
AND
IntegerSum(_AmountProcessed,1,_AmountProcessedNew) // Counting the processed ingredients
THEN
//SetDualEntityEvent(_Slot1,_Slot1,"PROC_KAP_Start_Potion_Making RECIPE");
DB_Singleton("DB_KAP_MainIngredientsProcessedCount",_AmountProcessedNew);
PROC_KAP_Process_ModRecipe_CheckRequirements(_Result,_ItemIndex,_ItemTemplate,_ComboCategory,_Amount); // ONLY FOR MOD RECIPES Prepares mod recipe
//
// Clean singletons
QRY
QRY_KAP_RecipeCheckKnownAndRequirements((STRING)_RecipePattern)
THEN
DB_Singleton("DB_KAP_RecipeProcessing_Error",0);
DB_Singleton("DB_KAP_RecipeProcessing_NeedCatalyst",0);
//
// Check recipe known
QRY
QRY_KAP_RecipeCheckKnownAndRequirements((STRING)_RecipePattern)
AND
GetHostCharacter(_Player)
AND
NOT DB_KAP_Recipes_Known(_,_RecipePattern)
THEN
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_NOT_RECIPE_KNOWN", 6.0, 1);
DB_Singleton("DB_KAP_RecipeProcessing_Error",1);
//
// Check catalyst
QRY
QRY_KAP_RecipeCheckKnownAndRequirements((STRING)_RecipePattern)
AND
GetHostCharacter(_Player)
AND
DB_KAP_Recipes_Known(_,_RecipePattern)
AND
DB_KAP_Recipe_Requirements(_RecipePattern,1,_)
AND
NOT DB_KAP_CatalystForRemove(_)
THEN
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_RECIPE_REQUIREMENTS", 6.0, 1);
DB_Singleton("DB_KAP_RecipeProcessing_Error",1);
//
QRY
QRY_KAP_RecipeCheckKnownAndRequirements((STRING)_RecipePattern)
AND
GetHostCharacter(_Player)
AND
DB_KAP_Recipes_Known(_,_RecipePattern)
AND
DB_KAP_Recipe_Requirements(_RecipePattern,1,_)
AND
DB_KAP_CatalystForRemove(_Catalyst)
THEN
DB_Singleton("DB_KAP_RecipeProcessing_NeedCatalyst",1);
//
// Check tag
QRY
QRY_KAP_RecipeCheckKnownAndRequirements((STRING)_RecipePattern)
AND
GetHostCharacter(_Player)
AND
DB_KAP_Recipes_Known(_,_RecipePattern)
AND
DB_KAP_Recipe_Requirements(_RecipePattern,_,_Tag)
AND
_Tag != NULL_00000000-0000-0000-0000-000000000000
AND
NOT IsTagged(_Player,_Tag,1)
THEN
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_RECIPE_REQUIREMENTS", 6.0, 1);
DB_Singleton("DB_KAP_RecipeProcessing_Error",1);
//
//
// Create result
PROC
PROC_KAP_Try_Create_Result()
AND
NOT DB_KAP_Registered_Result(_,_,_)
AND
GetHostCharacter(_Player)
THEN
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_NOT_RESULT", 6.0, 1);
// 
// Create result
PROC
PROC_KAP_Try_Create_Result()
AND
DB_KAP_Registered_Result(_Owner, _Result, _Amount)
THEN
PROC_KAP_Create_Result(_Owner,_Result,_Amount);
NOT DB_KAP_Registered_Result(_Owner,_Result,_Amount);
//
// Remove spent ingredients
PROC
PROC_KAP_Try_Remove_Spented()
AND
DB_KAP_Ingredients_Spent_Amount(_Slot,_Ingredient,_IngredientSpentAmount)
AND 
_IngredientSpentAmount > 0
AND
TemplateIsInInventory(_Ingredient,_Slot,_IngredientCount)
AND
_IngredientCount >= _IngredientSpentAmount
THEN
TemplateRemoveFrom(_Ingredient,_Slot,_IngredientSpentAmount);
NOT DB_KAP_Ingredients_Spent_Amount(_Slot,_Ingredient,_IngredientSpentAmount);

// -----------------------------------------------------------------------------------------
// ORIGINAL_RECIPES
// -----------------------------------------------------------------------------------------
//REGION ORIGINAL_RECIPES
// 
// ALCH_Affinity_*
// Looking for an affinity ingredients in Slot2
IF
DB_KAP_MainIngredientProcess(_Result,_MainIndex,_MainTemplate,_ComboCategory)
AND
IsSubstring(_ComboCategory,"ALCH_Affinity",1) // And this is a regular type recipe (main + affinity ingredients)
AND
DB_KAP_Current_Lab(_Lab,_Player,_)
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
DB_KAP_Affinities(_ComboCategory,_ExtractTemplate,_,_,_,_)
AND
DB_KAP_AvailableIngredients(_ExtractIndex,_Slot2,_,_ExtractTemplate,_,_) // _ExtractTemplate available
AND
QRY_KAP_OriginalRecipe_TryToRegisterResult(_Lab,_Result,_MainIndex,_ExtractIndex) // Try create
THEN
DB_NOOP(1);
//
// Try To Register Result to Base
QRY
QRY_KAP_OriginalRecipe_TryToRegisterResult((ITEM)_Lab,(ITEMROOT)_ResultTemplate,(INTEGER)_MainIndex,(INTEGER)_ExtractIndex)
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
DB_KAP_AvailableIngredients(_MainIndex,_Slot1,_MainCount,_MainTemplate,_,_)
AND
DB_KAP_AvailableIngredients(_ExtractIndex,_Slot2,_ExtractCount,_ExtractTemplate,_,_)
AND
QRY_KAP_GetSpentCount(_MainCount,_ExtractCount) // We are looking for the amount of ingredients to spend
AND
DB_Singleton("DB_KAP_SpentCount",_SpentCount)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot1,_SpentCount,_MainIndex) // Add ingredients to the list for subsequent deletion, and remove them from the database of available ingredients
AND
QRY_KAP_Available_Ingredients_Remove(_Slot2,_SpentCount,_ExtractIndex)
THEN
PROC_KAP_Register_Result(_ResultTemplate,_Lab,_SpentCount); // Register the result for later creation
//
// QUERIES
//
QRY
QRY_KAP_GetSpentCount((INTEGER)_Count1,(INTEGER)_Count2)
THEN
DB_Singleton("DB_KAP_SpentCount",0);
//
QRY
QRY_KAP_GetSpentCount((INTEGER)_Count1,(INTEGER)_Count2)
AND
_Count2 <= _Count1
THEN
DB_Singleton("DB_KAP_SpentCount",_Count2);
//
QRY
QRY_KAP_GetSpentCount((INTEGER)_Count1,(INTEGER)_Count2)
AND
_Count2 > _Count1
THEN
DB_Singleton("DB_KAP_SpentCount",_Count1);
// 
//
// ALCH_Affinity_Air_Earth_Fire_Shadow_Water
// Looking for an affinity ingredients in Slot2
IF
DB_KAP_MainIngredientProcess(_Result,_MainIndex,_MainTemplate,_ComboCategory)
AND
IsSubstring(_ComboCategory,"ALCH_Affinity_Air_Earth_Fire_Shadow_Water",1)
AND
DB_KAP_AvailableIngredients(_MainIndex,_,_MainCount,_,_,_)
THEN
PROC_KAP_ProcessAffinityAirEarthFireShadowWaterByStack(_Result,_MainIndex,_MainCount);
//
// Process by stack
PROC
PROC_KAP_ProcessAffinityAirEarthFireShadowWaterByStack((ITEMROOT)_ResultTemplate,(INTEGER)_MainIndex,(INTEGER)_Stack)
AND
IntegerSubtract(_Stack, 1, _NewStack)
AND
_NewStack >= 0
THEN
PROC_KAP_ProcessAffinityAirEarthFireShadowWaterByStack_Collect();
PROC_KAP_ProcessAffinityAirEarthFireShadowWater_TryToRegisterResult(_ResultTemplate,_MainIndex);
PROC_KAP_ProcessAffinityAirEarthFireShadowWaterByStack(_ResultTemplate,_MainIndex,_NewStack); // CYCLE by stack


PROC
PROC_KAP_ProcessAffinityAirEarthFireShadowWaterByStack_Collect()
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
DB_KAP_Affinities("ALCH_Affinity_Air",_ExtractAirTemplate,_,_,_,_)
AND
DB_KAP_AvailableIngredients(_ExtractAirIndex,_Slot2,_,_ExtractAirTemplate,_,_) // _ExtractAirTemplate available
AND
DB_KAP_Affinities("ALCH_Affinity_Earth",_ExtractEarthTemplate,_,_,_,_)
AND
DB_KAP_AvailableIngredients(_ExtractEarthIndex,_Slot2,_,_ExtractEarthTemplate,_,_) // _ExtractEarthTemplate available
AND
DB_KAP_Affinities("ALCH_Affinity_Fire",_ExtractFireTemplate,_,_,_,_)
AND
DB_KAP_AvailableIngredients(_ExtractFireIndex,_Slot2,_,_ExtractFireTemplate,_,_) // _ExtractFireTemplate available
AND
DB_KAP_Affinities("ALCH_Affinity_Shadow",_ExtractShadowTemplate,_,_,_,_)
AND
DB_KAP_AvailableIngredients(_ExtractShadowIndex,_Slot2,_,_ExtractShadowTemplate,_,_) // _ExtractShadowTemplate available
AND
DB_KAP_Affinities("ALCH_Affinity_Water",_ExtractWaterTemplate,_,_,_,_)
AND
DB_KAP_AvailableIngredients(_ExtractWaterIndex,_Slot2,_,_ExtractWaterTemplate,_,_) // _ExtractWaterTemplate available
THEN
DB_KAP_AffinityAirEarthFireShadowWater(_ExtractAirIndex,_ExtractEarthIndex,_ExtractFireIndex,_ExtractShadowIndex,_ExtractWaterIndex);

//
// Try To Register Result to Base
PROC
PROC_KAP_ProcessAffinityAirEarthFireShadowWater_TryToRegisterResult((ITEMROOT)_ResultTemplate,(INTEGER)_MainIndex)
AND
DB_KAP_Current_Lab(_Lab,_Player,_)
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
SysCount("DB_KAP_AffinityAirEarthFireShadowWater",5,_Amount)
AND
_Amount > 0
AND
DB_KAP_AffinityAirEarthFireShadowWater(_ExtractAirIndex,_ExtractEarthIndex,_ExtractFireIndex,_ExtractShadowIndex,_ExtractWaterIndex)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot1,1,_MainIndex) // Add ingredients to the list for subsequent deletion, and remove them from the database of available ingredients
AND
QRY_KAP_Available_Ingredients_Remove(_Slot2,1,_ExtractAirIndex)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot2,1,_ExtractEarthIndex)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot2,1,_ExtractFireIndex)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot2,1,_ExtractShadowIndex)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot2,1,_ExtractWaterIndex)
THEN
//SetDualEntityEvent(_Player,_Player,"PROC_KAP_ProcessAffinityAirEarthFireShadowWater_TryToRegisterResult");
PROC_KAP_Register_Result(_ResultTemplate,_Lab,1); // Register the result for later creation



//END_REGION


// -----------------------------------------------------------------------------------------
// MOD_RECIPES
// -----------------------------------------------------------------------------------------
//
PROC
PROC_KAP_Process_ModRecipe_CheckRequirements((ITEMROOT)_Result,(INTEGER)_ItemIndex,(ITEMROOT)_ItemTemplate,(STRING)_ComboCategory,(INTEGER)_Amount) // ONLY FOR MOD RECIPES Prepares mod recipe
AND
GetHostCharacter(_Player)
AND
NOT DB_Singleton("DB_KAP_RecipeProcessing_Error",1)
THEN 
//SetDualEntityEvent(_Player,_Player,"PROC_KAP_Process_ModRecipe_CheckRequirements RECIPE");
DB_KAP_MainIngredientProcess(_Result,_ItemIndex,_ItemTemplate,_ComboCategory); // We send the main ingredient for processing
PROC_KAP_Process_ModRecipe((STRING)_ComboCategory,(INTEGER)_Amount);

//REGION MOD_RECIPES
//
// Looking in slot2 and collect ingredients for recipe
IF
DB_KAP_MainIngredientProcess(_Result,_MainIndex,_MainTemplate,_ComboCategory)
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
IsSubstring(_ComboCategory,"ALCH_Recipe",1) // ONLY FOR MOD RECIPES Prepares mod recipe
AND
DB_KAP_Recipe_Ingredients(_ComboCategory,_SecondaryTemplate,_SecondaryAmountForRecipe)
THEN
//SetDualEntityEvent(_Slot2,_Slot2,"DB_KAP_MainIngredientProcess RECIPE");
DB_KAP_RecipeByMainIngredient(_ComboCategory,_SecondaryTemplate,_SecondaryAmountForRecipe);
//
// CYCLE
// Process main ingredients in stack by one
PROC
PROC_KAP_Process_ModRecipe((STRING)_ComboCategory,(INTEGER)_MainIngredientStack)
AND
GetHostCharacter(_Player)
AND
IsSubstring(_ComboCategory,"ALCH_Recipe",1)
AND
IntegerSubtract(_MainIngredientStack, 1, _NewStack)
AND
_NewStack >= 0
THEN
//SetDualEntityEvent(_Player,_Player,"PROC_KAP_Process_ModRecipe RECIPE");
SysClear("DB_KAP_TotalAvailableByTemplate",3);
PROC_KAP_ModRecipe_Check_AvailableSecondaryIngredients(_ComboCategory);
PROC_KAP_ModRecipe_Try_Create(_ComboCategory); 
PROC_KAP_Process_ModRecipe(_ComboCategory,_NewStack);
//
// Collect secondary ingredients
PROC
PROC_KAP_ModRecipe_Check_AvailableSecondaryIngredients((STRING)_ComboCategory)
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
DB_KAP_RecipeByMainIngredient(_ComboCategory,_Template,_AmountRecipe)
AND
DB_KAP_AvailableIngredients(_,_Slot2,_AmountAvailable,_Template,_,_) 
//AND
//ConcatenateInteger("PROC_KAP_ModRecipe_Check_AvailableSecondaryIngredients _AmountAvailable: ",_AmountAvailable,_StringFinal)
AND
_AmountAvailable >= _AmountRecipe
THEN
//SetDualEntityEvent(_Slot2,_Slot2, "PROC_KAP_ModRecipe_Check_AvailableSecondaryIngredients");
DB_KAP_TotalAvailableByTemplate(_ComboCategory,_Template,_AmountAvailable);

//
// TRY REGISTER RESULT IF ALL INGREDIENTS READY
PROC
PROC_KAP_ModRecipe_Try_Create((STRING)_ComboCategory)
AND
DB_KAP_Current_Lab(_Lab,_Player,_)
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
DB_KAP_MainIngredientProcess(_ResultTemplate,_MainIndex,_,_ComboCategory)
AND
DB_KAP_RecipeByMainIngredient(_ComboCategory,_SecondaryTemplate,_AmountRecipe)
AND
DB_KAP_TotalAvailableByTemplate(_ComboCategory,_SecondaryTemplate,_AmountAvailable)
AND
SysCount("DB_KAP_RecipeByMainIngredient", 3, _RecipeSize)
AND
SysCount("DB_KAP_TotalAvailableByTemplate", 3, _RecipeAvailableSize)
AND
_RecipeSize == _RecipeAvailableSize
AND
QRY_KAP_Available_Ingredients_Remove_Once(_Slot1,1,_MainIndex) // Add ingredients to the list for subsequent deletion, and remove them from the database of available ingredients
AND
QRY_KAP_Available_Ingredients_Remove_Template(_Slot2,_ComboCategory)
THEN
//SetDualEntityEvent(_Player,_Player,"PROC_KAP_ModRecipe_Try_Create");
PROC_KAP_Register_Result(_ResultTemplate,_Lab,1);
PROC_KAP_Spent_Catalyst(1); // if need DB_Singleton("DB_KAP_RecipeProcessing_NeedCatalyst",1);
NOT DB_OnlyOnce("DB_KAP_Available_Ingredients_Remove_Once");
NOT DB_KAP_TotalAvailableByTemplate(_ComboCategory,_SecondaryTemplate,_AmountAvailable);

//END_REGION
//
// -----------------------------------------------------------------------------------------
// GUIDSTRING_RECIPES
// -----------------------------------------------------------------------------------------
//REGION GUIDSTRING_RECIPES
// Looking in slot2 and collect ingredients for recipe
IF
DB_KAP_MainIngredientProcess(_Result,_MainIndex,_MainTemplate,_ComboCategory)
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
IsSubstring(_ComboCategory,"ALCH_GUIDString",1) // 
AND
DB_KAP_Affinities_GUIDString(_ComboCategory,_GUIDPattern,_SecondaryAmountForRecipe)
THEN
DB_KAP_RecipeByMainIngredientGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountForRecipe);
//
// CYCLE
// Process main ingredients in stack by one
PROC
PROC_KAP_Process_ModRecipe((STRING)_ComboCategory,(INTEGER)_MainIngredientStack)
AND
IsSubstring(_ComboCategory,"ALCH_GUIDString",1)
AND
IntegerSubtract(_MainIngredientStack, 1, _NewStack)
AND
_NewStack >= 0
THEN
DB_Singleton("DB_KAP_GetTotalAmountByGUID",0);
PROC_KAP_ModRecipe_Check_AvailableSecondaryIngredientsGUID(_ComboCategory);
PROC_KAP_ModRecipe_Try_CreateGUID(_ComboCategory); 
PROC_KAP_Process_ModRecipe(_ComboCategory,_NewStack);
//
// Collect secondary ingredients
PROC
PROC_KAP_ModRecipe_Check_AvailableSecondaryIngredientsGUID((STRING)_ComboCategory)
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
DB_KAP_RecipeByMainIngredientGUID(_ComboCategory,_GUIDPattern,_)
AND
QRY_KAP_CalculateTotalAmountByTemplateGUID(_Slot2,_GUIDPattern)
THEN
DB_NOOP(1);
//
// Calculate total amount of ingredients by its templates
QRY
QRY_KAP_CalculateTotalAmountByTemplateGUID((ITEM)_Slot,(STRING)_GUIDPattern)
AND
DB_KAP_AvailableIngredients(_,_Slot,_Amount,_,_GUIDString,_) 
AND
IsSubstring(_GUIDString,_GUIDPattern,1)
AND
DB_Singleton("DB_KAP_GetTotalAmountByGUID",_TotalAmount)
AND
IntegerSum(_TotalAmount,_Amount,_NewTotalAmount)
THEN
DB_Singleton("DB_KAP_GetTotalAmountByGUID",_NewTotalAmount);
//
// IF _SecondaryAmountAvailable >= _SecondaryAmountForRecipe then collect secondary ingredients for recipe
PROC
PROC_KAP_ModRecipe_Check_AvailableSecondaryIngredientsGUID((STRING)_ComboCategory)
AND
DB_KAP_Current_Lab_Slots(_,_Slot2,_)
AND
DB_KAP_RecipeByMainIngredientGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountForRecipe)
AND
DB_Singleton("DB_KAP_GetTotalAmountByGUID",_SecondaryAmountAvailable)
AND
_SecondaryAmountAvailable >= _SecondaryAmountForRecipe
THEN
DB_KAP_RecipeByMainIngredient_AvailableSecondaryIngredientsGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountAvailable);
//
// TRY REGISTER RESULT IF ALL INGREDIENTS READY
// RecipeSize == 1
PROC
PROC_KAP_ModRecipe_Try_CreateGUID((STRING)_ComboCategory)
AND
DB_KAP_Current_Lab(_Lab,_Player,_)
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
DB_KAP_MainIngredientProcess(_ResultTemplate,_MainIndex,_MainTemplate,_ComboCategory)
AND
DB_KAP_RecipeByMainIngredientGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountForRecipe)
AND
DB_KAP_RecipeByMainIngredient_AvailableSecondaryIngredientsGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountAvailable)
AND
SysCount("DB_KAP_RecipeByMainIngredientGUID", 3, _RecipeSize)
AND
_RecipeSize == 1
AND
QRY_KAP_Available_Ingredients_Remove_Once(_Slot1,1,_MainIndex) // Add ingredients to the list for subsequent deletion, and remove them from the database of available ingredients
AND
QRY_KAP_Available_Ingredients_Remove_GUID(_Slot2,_ComboCategory)
THEN
PROC_KAP_Spent_Catalyst(1);
PROC_KAP_Register_Result(_ResultTemplate,_Lab,1);
NOT DB_OnlyOnce("DB_KAP_Available_Ingredients_Remove_Once");
NOT DB_KAP_RecipeByMainIngredient_AvailableSecondaryIngredientsGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountAvailable);
//
// _RecipeSize > 1
PROC
PROC_KAP_ModRecipe_Try_CreateGUID((STRING)_ComboCategory)
AND
DB_KAP_Current_Lab(_Lab,_Player,_)
AND
DB_KAP_Current_Lab_Slots(_Slot1,_Slot2,_)
AND
DB_KAP_MainIngredientProcess(_ResultTemplate,_MainIndex,_MainTemplate,_ComboCategory)
AND
DB_KAP_RecipeByMainIngredientGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountForRecipe)
AND
DB_KAP_RecipeByMainIngredient_AvailableSecondaryIngredientsGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountAvailable)
AND
SysCount("DB_KAP_RecipeByMainIngredientGUID", 3, _RecipeSize)
AND
_RecipeSize > 1
AND
SysCount("DB_KAP_RecipeByMainIngredient_AvailableSecondaryIngredientsGUID", 3, _RecipeAvailableSize)
AND
_RecipeSize == _RecipeAvailableSize
AND
QRY_KAP_Available_Ingredients_Remove_Once(_Slot1,1,_MainIndex) // Add ingredients to the list for subsequent deletion, and remove them from the database of available ingredients
AND
QRY_KAP_Available_Ingredients_Remove_GUID(_Slot2,_ComboCategory)
THEN
PROC_KAP_Spent_Catalyst(1);
PROC_KAP_Register_Result(_ResultTemplate,_Lab,1);
NOT DB_OnlyOnce("DB_KAP_Available_Ingredients_Remove_Once");
NOT DB_KAP_RecipeByMainIngredient_AvailableSecondaryIngredientsGUID(_ComboCategory,_GUIDPattern,_SecondaryAmountAvailable);

//END_REGION



// -----------------------------------------------------------------------------------------
// ADDITIONAL_STATUS
// -----------------------------------------------------------------------------------------
//REGION ADDITIONAL_STATUS
//
QRY
QRY_KAP_Try_Apply_Additional_Status((ITEM)_Owner,(ITEM)_Result,(STRING)_ResultType,(STRING)_ResultStatus)
AND
DB_KAP_Current_Lab(_,_Player,_)
AND
DB_KAP_Property_Ability_For_Additional(_Level)
AND
QRY_KAP_PlayerAbilityLevelIsRequired(_Player,_Level)
AND
DB_KAP_Current_Lab_Slots(_,_,_Slot3)
AND
DB_KAP_AvailableIngredients(_AdditionIndex,_Slot3,_,_AdditionTemplate,_,_) // _AdditionTemplate available
AND
DB_KAP_Affinities(_Affinity,_AdditionTemplate,_,_Status,_,_Type)
AND
_Affinity != "ALCH_Affinity_All"
AND
QRY_KAP_AdditionalType_IsValid(_ResultType,_Type)
AND
_Status != _ResultStatus
AND
DB_KAP_CatalystForRemove(_CatalystTemplate)
AND
Concatenate("KAP_",_Status,_KAPStatus)
AND
NOT DB_KAP_AdditionalStatus_Added(1)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot3,1,_AdditionIndex)
THEN
SetDualEntityEvent(_Slot3,_Slot3,"QRY_KAP_Try_Apply_Additional_Status FIRST");
DB_Singleton("DB_KAP_RecipeProcessing_NeedCatalyst",1);
PROC_KAP_Spent_Catalyst(1);
ApplyStatus(_Result, _KAPStatus, -1.0, 1);
DB_KAP_AdditionalStatus_Added(1);
ObjectTimerLaunch(_Result, "KAP_AddResultToPlayer_Timer", 250); // Without this, all results fall into one stack and the statuses get mixed up.
//
// KAP_MESSAGE_ERROR_INTELLIGENCE_LOW_FOR_ADDITIONAL_STATUS
QRY
QRY_KAP_Try_Apply_Additional_Status((ITEM)_Owner,(ITEM)_Result,(STRING)_ResultType,(STRING)_ResultStatus)
AND
DB_KAP_Current_Lab(_,_Player,_)
AND
DB_KAP_Property_Ability_For_Additional(_Level)
AND
DB_KAP_Current_Lab_Slots(_,_,_Slot3)
AND
DB_KAP_AvailableIngredients(_AdditionIndex,_Slot3,_,_AdditionTemplate,_,_) // _AdditionTemplate available
AND
DB_KAP_Affinities(_,_AdditionTemplate,_,_Status,_,_Type)
AND
QRY_KAP_AdditionalType_IsValid(_ResultType,_Type)
AND
_Status != _ResultStatus
AND
NOT QRY_KAP_PlayerAbilityLevelIsRequired(_Player,_Level)
AND
NOT DB_KAP_AdditionalStatus_Added(1)
THEN
SetDualEntityEvent(_Slot3,_Slot3,"QRY_KAP_Try_Apply_Additional_Status KAP_MESSAGE_ERROR_INTELLIGENCE_LOW_FOR_ADDITIONAL_STATUS");
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_INTELLIGENCE_LOW_FOR_ADDITIONAL_STATUS", 6.0, 1);
//
// KAP_MESSAGE_ERROR_NOT_CATALYST_FOR_ADDITIONAL_STATUS
QRY
QRY_KAP_Try_Apply_Additional_Status((ITEM)_Owner,(ITEM)_Result,(STRING)_ResultType,(STRING)_ResultStatus)
AND
DB_KAP_Current_Lab(_,_Player,_)
AND
DB_KAP_Property_Ability_For_Additional(_Level)
AND
QRY_KAP_PlayerAbilityLevelIsRequired(_Player,_Level)
AND
DB_KAP_Current_Lab_Slots(_,_,_Slot3)
AND
DB_KAP_AvailableIngredients(_AdditionIndex,_Slot3,_,_AdditionTemplate,_,_) // _AdditionTemplate available
AND
DB_KAP_Affinities(_,_AdditionTemplate,_,_Status,_,_Type)
AND
QRY_KAP_AdditionalType_IsValid(_ResultType,_Type)
AND
_Status != _ResultStatus
AND
NOT DB_KAP_CatalystForRemove(_) // NOT has catalyst for apply additional status
AND
NOT DB_KAP_AdditionalStatus_Added(1)
THEN
SetDualEntityEvent(_Slot3,_Slot3,"QRY_KAP_Try_Apply_Additional_Status KAP_MESSAGE_ERROR_NOT_CATALYST_FOR_ADDITIONAL_STATUS");
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_NOT_CATALYST_FOR_ADDITIONAL_STATUS", 6.0, 1);
//
// NOT ADDITIONAL STATUSES
QRY
QRY_KAP_Try_Apply_Additional_Status((ITEM)_Owner,(ITEM)_Result,(STRING)_ResultType,(STRING)_ResultStatus)
AND
NOT DB_KAP_AdditionalStatus_Added(1)
THEN
SetDualEntityEvent(_Owner,_Owner,"QRY_KAP_Try_Apply_Additional_Status NOT ADDITIONAL STATUSES");
ObjectTimerLaunch(_Result, "KAP_AddResultToPlayer_Timer", 500);


//
// VALIDATION Statuses
// GRENADE with POTION
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "GRENADE"
AND
_AdditionalType == "POTION"
THEN
DB_NOOP(1);
// GRENADE with ELIXIR
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "GRENADE"
AND
_AdditionalType == "ELIXIR"
THEN
DB_NOOP(1);
// GRENADE with DIPPED
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "GRENADE"
AND
_AdditionalType == "DIPPED"
THEN
DB_NOOP(1);
// DIPPED only with DIPPED
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "DIPPED"
AND
_ResultType  == _AdditionalType
THEN
DB_NOOP(1);
//
// POTION with POTION
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "POTION"
AND
_ResultType  == _AdditionalType
THEN
DB_NOOP(1);
//
// POTION with ELIXIR
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "POTION"
AND
_AdditionalType  == "ELIXIR"
THEN
DB_NOOP(1);
//
// ELIXIR with ELIXIR
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "ELIXIR"
AND
_ResultType  == _AdditionalType
THEN
DB_NOOP(1);
//
// ELIXIR with POTION
QRY
QRY_KAP_AdditionalType_IsValid((STRING)_ResultType,(STRING)_AdditionalType)
AND
_ResultType == "ELIXIR"
AND
_AdditionalType  == "POTION"
THEN
DB_NOOP(1);

//END_REGION

// -----------------------------------------------------------------------------------------
// FINAL_ADD_RESULT
// -----------------------------------------------------------------------------------------
//REGION FINAL_ADD_RESULT
//
// To work around the problem where the created item is immediately added to the stack and the statuses get mixed up
IF
ObjectTimerFinished(_Result, "KAP_AddResultToPlayer_Timer")
AND
DB_KAP_Current_Lab(_,_,_ResultSlot)
THEN
ToInventory((ITEM)_Result,_ResultSlot,1,0,1);




//END_REGION

// -----------------------------------------------------------------------------------------
// REGISTER AND CREATE RESULTS
// -----------------------------------------------------------------------------------------
//REGION FINAL_ADD_RESULT
//
// Add result template 
PROC
PROC_KAP_Register_Result((ITEMROOT)_Template,(ITEM)_Owner,(INTEGER)_Amount)
AND
DB_KAP_Registered_Result(_Owner, _Template,_OldAmount)
AND
IntegerSum(_OldAmount, _Amount, _NewAmount)
THEN
//SetDualEntityEvent(_Owner,_Owner,"PROC_KAP_Register_Result EXIST");
DB_KAP_Registered_Result(_Owner, _Template,_NewAmount);
NOT DB_KAP_Registered_Result(_Owner, _Template,_OldAmount);
//
// Add new result template
PROC
PROC_KAP_Register_Result((ITEMROOT)_Template,(ITEM)_Owner,(INTEGER)_Amount)
AND
NOT DB_KAP_Registered_Result(_Owner, _Template,_)
THEN
//SetDualEntityEvent(_Owner,_Owner,"PROC_KAP_Register_Result NEW");
DB_KAP_Registered_Result(_Owner, _Template,_Amount);
//
// CYCLE
// Create results for alch template with status
PROC
PROC_KAP_Create_Result((ITEM)_Owner,(ITEMROOT)_Template,(INTEGER)_Amount)
//AND
//DB_KAP_Current_Lab(_Lab,_Player,_)
AND
DB_KAP_Affinities(_,_,_Template,_ResultStatus,_,_ResultType)
AND
IntegerSubtract(_Amount, 1, _NewAmount)
AND
_NewAmount >= 0
AND
CreateAtObject(_Template, _Owner, 0, 0, "", 1, _Result)
AND
QRY_KAP_Try_Apply_Additional_Status((ITEM)_Owner,(ITEM)_Result,(STRING)_ResultType,(STRING)_ResultStatus)
THEN
NOT DB_KAP_AdditionalStatus_Added(1);
PROC_KAP_Create_Result(_Owner,_Template,_NewAmount);
//
// CYCLE
// Create results for alch template WITHOUT status
// TRANSMUTATION FOR EXAMPLE
PROC
PROC_KAP_Create_Result((ITEM)_Owner,(ITEMROOT)_Template,(INTEGER)_Amount)
//AND
//DB_KAP_Current_Lab(_Lab,_Player,_)
AND
NOT DB_KAP_Affinities(_,_,_Template,_,_,_)
AND
IntegerSubtract(_Amount, 1, _NewAmount)
AND
_NewAmount >= 0
AND
CreateAtObject(_Template, _Owner, 0, 0, "", 1, _Result)
THEN
//SetDualEntityEvent(_Player,_Player,"Create results for alch template WITHOUT status");
ObjectTimerLaunch(_Result, "KAP_AddResultToPlayer_Timer", 100);
PROC_KAP_Create_Result(_Owner,_Template,_NewAmount);







//END_REGION




//
// CYCLE
// Remove only once Catalyst if need
PROC
PROC_KAP_Spent_Catalyst((INTEGER)_Amount)
AND
DB_Singleton("DB_KAP_RecipeProcessing_NeedCatalyst",1)
AND
DB_KAP_Current_Lab_Slots(_Slot1,_,_)
AND
DB_KAP_CatalystForRemove(_CatalystTemplate)
AND
NOT DB_Singleton("DB_KAP_CatalystSpented",1)
AND
QRY_KAP_Add_Ingredients_Spent(_Slot1,_CatalystTemplate,1)
THEN
DB_Singleton("DB_KAP_CatalystSpented",1);
DB_Singleton("DB_KAP_RecipeProcessing_NeedCatalyst",0);




// -----------------------------------------------------------------------------------------
// FINISH
// -----------------------------------------------------------------------------------------
//REGION FINISH
// REMOVE FAKE RESULT 
IF
ObjectTimerFinished(_LabCombinedResult, "KAP_DeleteLabCombinedResult_Timer")
THEN
RequestDelete((ITEM)_LabCombinedResult);

//END_REGION

// -----------------------------------------------------------------------------------------
// SPENT_INGREDIENTS
// -----------------------------------------------------------------------------------------
//REGION SPENT_INGREDIENTS
//
// 
// REMOVE INGREDIENT IF SPENTED FOR POTION MAKING
// Be sure to do it in this order! Otherwise, both may be executed in a row.
// Remove ingredients _Slot1,_SpentCount,_MainIndex)
// IF _NewAmount <= 0
QRY
QRY_KAP_Available_Ingredients_Remove((ITEM)_Slot,(INTEGER)_Amount,(INTEGER)_Index)
AND
DB_KAP_AvailableIngredients(_Index,_Slot,_CollectedAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat)
AND
IntegerSubtract(_CollectedAmount, _Amount, _NewAmount)
AND
_NewAmount <= 0
AND
QRY_KAP_Add_Ingredients_Spent(_Slot,_ItemTemplate,_Amount)
THEN
NOT DB_KAP_AvailableIngredients(_Index,_Slot,_CollectedAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat);
//
// IF _NewAmount > 0
QRY
QRY_KAP_Available_Ingredients_Remove((ITEM)_Slot,(INTEGER)_Amount,(INTEGER)_Index)
AND
DB_KAP_AvailableIngredients(_Index,_Slot,_CollectedAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat)
AND
IntegerSubtract(_CollectedAmount, _Amount, _NewAmount)
AND
_NewAmount > 0
AND
QRY_KAP_Add_Ingredients_Spent(_Slot,_ItemTemplate,_Amount)
THEN
NOT DB_KAP_AvailableIngredients(_Index,_Slot,_CollectedAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat);
DB_KAP_AvailableIngredients(_Index,_Slot,_NewAmount,_ItemTemplate,_ItemTemplateGUID,_ItemStat);
//
// REMOVE ONCE
// Remove once for main ingredient and mutiple additional ingredients
QRY
QRY_KAP_Available_Ingredients_Remove_Once((ITEM)_Slot,(INTEGER)_Amount,(INTEGER)_Index)
AND
NOT DB_OnlyOnce("DB_KAP_Available_Ingredients_Remove_Once")
AND
QRY_KAP_Available_Ingredients_Remove(_Slot,_Amount,_Index)
THEN
DB_OnlyOnce("DB_KAP_Available_Ingredients_Remove_Once");
//
// Skip iteration
QRY
QRY_KAP_Available_Ingredients_Remove_Once((ITEM)_Slot,(INTEGER)_Amount,(INTEGER)_Index)
AND
DB_OnlyOnce("DB_KAP_Available_Ingredients_Remove_Once")
THEN
DB_NOOP(1);
//
// REMOVE MULTIPLE BY TEMPLATE
// Remove mutiple additional ingredients when need >1 for recipe
QRY
QRY_KAP_Available_Ingredients_Remove_Template((ITEM)_Slot,(STRING)_ComboCategory)
AND
GetHostCharacter(_Player)
AND
DB_KAP_RecipeByMainIngredient(_ComboCategory,_Template,_AmountRecipe)
//AND
//GUIDToString(_Template,_TemplateString)
//AND
//Concatenate("QRY_KAP_Available_Ingredients_Remove_Template - ",_TemplateString,_String1)
//AND 
//Concatenate(_String1," - ",_String2)
//AND
//ConcatenateInteger(_String2,_AmountRecipe,_StringFinal)
THEN
//SetDualEntityEvent(_Player,_Player,_StringFinal);
DB_Singleton("DB_KAP_MultipleRemovedCount",0);
PROC_KAP_CycleForRemoveByIndex(_Slot,_Template,_AmountRecipe);

//
// IF _AmountRecipe <= _Amount THEN only once iterate
PROC
PROC_KAP_CycleForRemoveByIndex((ITEM)_Slot,(ITEMROOT)_Template,(INTEGER)_AmountRecipe)
AND
GetHostCharacter(_Player)
AND
DB_KAP_AvailableIngredients(_Index,_Slot,_Amount,_Template,_,_)
AND
_AmountRecipe <= _Amount
AND
DB_Singleton("DB_KAP_MultipleRemovedCount",_RemovedCount)
AND
_RemovedCount < _AmountRecipe
THEN
//SetDualEntityEvent(_Player,_Player,"PROC_KAP_CycleForRemoveByIndex 1");
DB_Singleton("DB_KAP_MultipleRemovedCount",_AmountRecipe);
PROC_KAP_RemoveByIndex(_Slot,_Index,_AmountRecipe);
//
// IF _AmountRecipe > _Amount THEN count removed and lets another iteration
PROC
PROC_KAP_CycleForRemoveByIndex((ITEM)_Slot,(ITEMROOT)_Template,(INTEGER)_AmountRecipe)
AND
GetHostCharacter(_Player)
AND
DB_KAP_AvailableIngredients(_Index,_Slot,_Amount,_Template,_,_)
AND
_AmountRecipe > _Amount
AND
DB_Singleton("DB_KAP_MultipleRemovedCount",_RemovedCount)
AND
IntegerSum(_RemovedCount,_Amount,_NewRemovedCount)
AND
_NewRemovedCount <= _AmountRecipe
THEN
//SetDualEntityEvent(_Player,_Player,"PROC_KAP_CycleForRemoveByIndex 2");
DB_Singleton("DB_KAP_MultipleRemovedCount",_NewRemovedCount);
PROC_KAP_RemoveByIndex(_Slot,_Index,_Amount);
PROC_KAP_CycleForRemoveByIndex(_Slot,_Template,_AmountRecipe);
//
// REMOVE MULTIPLE BY GUID
// Remove mutiple additional ingredients when need >1 for recipe
QRY
QRY_KAP_Available_Ingredients_Remove_GUID((ITEM)_Slot,(STRING)_ComboCategory)
AND
DB_KAP_RecipeByMainIngredientGUID(_ComboCategory,_GUIDPattern,_AmountRecipe)
THEN
DB_Singleton("DB_KAP_MultipleRemovedCount",0);
PROC_KAP_CycleForRemoveByIndexGUID(_Slot,_GUIDPattern,_AmountRecipe);
//
// IF _AmountRecipe <= _Amount THEN only once iterate
PROC
PROC_KAP_CycleForRemoveByIndexGUID((ITEM)_Slot,(STRING)_GUIDPattern,(INTEGER)_AmountRecipe)
AND
DB_KAP_AvailableIngredients(_Index,_Slot,_Amount,_,_GUIDString,_)
AND
IsSubstring(_GUIDString,_GUIDPattern,1)
AND
_AmountRecipe <= _Amount
AND
DB_Singleton("DB_KAP_MultipleRemovedCount",_RemovedCount)
AND
_RemovedCount < _AmountRecipe
THEN
DB_Singleton("DB_KAP_MultipleRemovedCount",_AmountRecipe);
PROC_KAP_RemoveByIndex(_Slot,_Index,_AmountRecipe);
//
// IF _AmountRecipe > _Amount THEN count removed and lets another iteration
PROC
PROC_KAP_CycleForRemoveByIndexGUID((ITEM)_Slot,(STRING)_GUIDPattern,(INTEGER)_AmountRecipe)
AND
DB_KAP_AvailableIngredients(_Index,_Slot,_Amount,_,_GUIDString,_)
AND
IsSubstring(_GUIDString,_GUIDPattern,1)
AND
_AmountRecipe > _Amount
AND
DB_Singleton("DB_KAP_MultipleRemovedCount",_RemovedCount)
AND
IntegerSum(_RemovedCount,_Amount,_NewRemovedCount)
AND
_NewRemovedCount <= _AmountRecipe
THEN
DB_Singleton("DB_KAP_MultipleRemovedCount",_NewRemovedCount);
PROC_KAP_RemoveByIndex(_Slot,_Index,_Amount);
PROC_KAP_CycleForRemoveByIndexGUID(_Slot,_GUIDPattern,_AmountRecipe);
//
// PROC transit QRY
PROC
PROC_KAP_RemoveByIndex((ITEM)_Slot,(INTEGER)_Index,(INTEGER)_Amount)
AND
QRY_KAP_Available_Ingredients_Remove(_Slot,_Amount,_Index)
THEN
DB_NOOP(1);
//
// REGISTER SPENTED INGREDIENTS FOR REMOVE BY TEMPLATE ON FINISH
// Counter for spented ingredients
QRY
QRY_KAP_Add_Ingredients_Spent((ITEM)_Slot,(ITEMROOT)_Ingredient,(INTEGER)_Amount)
AND
DB_KAP_Ingredients_Spent_Amount(_Slot,_Ingredient,_SpentAmount)
AND
IntegerSum(_SpentAmount, _Amount, _NewAmount)
//AND
//GUIDToString(_Ingredient,_IngredientString)
//AND
//Concatenate("QRY_KAP_Add_Ingredients_Spent - ",_IngredientString,_String1)
//AND
//Concatenate(_String1," - ",_String2)
//AND
//ConcatenateInteger(_String2,_Amount,_StringFinal)
THEN
//SetDualEntityEvent(_Slot,_Slot,_StringFinal);
DB_KAP_Ingredients_Spent_Amount(_Slot,_Ingredient,_NewAmount);
DB_NOOP(1);
// 
// New counter for spented ingredients
QRY
QRY_KAP_Add_Ingredients_Spent((ITEM)_Slot,(ITEMROOT)_Ingredient,(INTEGER)_Amount)
AND
NOT DB_KAP_Ingredients_Spent_Amount(_Slot,_Ingredient,_)
//AND
//GUIDToString(_Ingredient,_IngredientString)
//AND
//Concatenate("QRY_KAP_Add_Ingredients_Spent - ",_IngredientString,_String1)
//AND
//Concatenate(_String1," - ",_String2)
//AND
//ConcatenateInteger(_String2,_Amount,_StringFinal)
THEN
//SetDualEntityEvent(_Slot,_Slot,_StringFinal);
DB_KAP_Ingredients_Spent_Amount(_Slot,_Ingredient,_Amount);
DB_NOOP(1);

//END_REGION



//----------------------------------------------------------------
// TECHNICAL 
//----------------------------------------------------------------
//REGION TECHNICAL
//
// Singleton for DB_KAP_Current_Lab 
//
IF
DB_KAP_Current_Lab(_NewLab,_NewPlayer,_NewResultSlot)
AND
DB_KAP_Current_Lab(_OldLab,_OldPlayer,_OldResultSlot)
AND
_NewLab != _OldLab
THEN
NOT DB_KAP_Current_Lab(_OldLab,_OldPlayer,_OldResultSlot);
//
IF
DB_KAP_Current_Lab(_NewLab,_NewPlayer,_NewResultSlot)
AND
DB_KAP_Current_Lab(_OldLab,_OldPlayer,_OldResultSlot)
AND
_NewPlayer != _OldPlayer
THEN
NOT DB_KAP_Current_Lab(_OldLab,_OldPlayer,_OldResultSlot);
//
IF
DB_KAP_Current_Lab(_NewLab,_NewPlayer,_NewResultSlot)
AND
DB_KAP_Current_Lab(_OldLab,_OldPlayer,_OldResultSlot)
AND
_NewResultSlot != _OldResultSlot
THEN
NOT DB_KAP_Current_Lab(_OldLab,_OldPlayer,_OldResultSlot);
//
// Singleton for count DB_KAP_Ingredients_Spent_Amount
//
IF
DB_KAP_Ingredients_Spent_Amount(_NewLab,_NewIngredient,_NewIngredientSpentAmount)
AND
DB_KAP_Ingredients_Spent_Amount(_OldLab,_OldIngredient,_OldIngredientSpentAmount)
AND
_NewLab == _OldLab
AND
_NewIngredient == _OldIngredient
AND
_NewIngredientSpentAmount != _OldIngredientSpentAmount
THEN
NOT DB_KAP_Ingredients_Spent_Amount(_OldLab,_OldIngredient,_OldIngredientSpentAmount);


//
// Singleton for count DB_KAP_TotalAvailableByTemplate
//
IF
DB_KAP_TotalAvailableByTemplate(_NewComboCategory,_NewTemplate,_NewAmount)
AND
DB_KAP_TotalAvailableByTemplate(_OldComboCategory,_OldTemplate,_OldAmount)
AND
_NewComboCategory == _OldComboCategory
AND
_NewTemplate == _OldTemplate
AND
_NewAmount != _OldAmount
THEN
NOT DB_KAP_TotalAvailableByTemplate(_OldComboCategory,_OldTemplate,_OldAmount);



//
// QRY for clear db
QRY
QRY_KAP_Clear_Old_Variables()
AND
QRY_KAP_Clear_MainIngredientProcess()
THEN
SysClear("DB_KAP_CatalystForRemove", 1);
SysClear("DB_KAP_Current_Lab_Slots", 3);
SysClear("DB_KAP_AvailableIngredients", 6);
SysClear("DB_KAP_Ingredients_Spent_Amount", 3);
SysClear("DB_KAP_Registered_Result", 3);
DB_Singleton("DB_KAP_Collect_Ingredients_Slot3_Finish",0);
DB_Singleton("DB_KAP_StartCombined_Error",0);
DB_Singleton("DB_KAP_MainIngredientsAmount",0);
DB_Singleton("DB_KAP_MainIngredientsProcessedCount",0);
DB_Singleton("DB_KAP_SpentCount",0);
DB_Singleton("DB_KAP_CatalystSpented",0);
DB_Singleton("DB_KAP_RecipeProcessing_NeedCatalyst",0);
DB_NOOP(1);
//
// FOR MOD RECIPE
QRY
QRY_KAP_Clear_MainIngredientProcess()
THEN
SysClear("DB_KAP_TotalAvailableByTemplate",3);
SysClear("DB_KAP_AffinityAirEarthFireShadowWater",5);
SysClear("DB_KAP_MainIngredientProcess", 4); // MOD RECIPE
SysClear("DB_KAP_RecipeByMainIngredient", 3); // MOD RECIPE
SysClear("DB_KAP_RecipeByMainIngredientGUID", 3); // MOD RECIPE
SysClear("DB_KAP_RecipeByMainIngredient_AvailableSecondaryIngredientsGUID", 3); // MOD RECIPE
NOT DB_OnlyOnce("DB_KAP_Available_Ingredients_Remove_Once"); // MOD RECIPE
//

//END_REGION
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "GLO_KelaAlchemyProject"
