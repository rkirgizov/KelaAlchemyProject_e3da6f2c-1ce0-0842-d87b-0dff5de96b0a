Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_KAP_DistilationSet(DEC_Laboratory_Flask_Glass_Installation_D_Empty_A_9486a285-3e41-4918-b7a3-be5f099d00ad);
DB_KAP_DistilationSet(DEC_Laboratory_Flask_Glass_Installation_E_Empty_A_6aa75479-f26f-48ab-bc05-9c117532dccb);



// Strong, need 1 for Catalyst
DB_KAP_Bottle_Alcohol(CONS_Drink_Valuable_Arabellan_Dry_ae82c350-9224-4978-ac27-c31b13b5a7ad);
DB_KAP_Bottle_Alcohol(CONS_GEN_Alcohol_Bottle_Normal_E_738298a6-c8e7-4154-a571-03b287ce1b1e);
DB_KAP_Bottle_Alcohol(CONS_Drink_Valuable_Mermaid_Whiskey_A_54a9152c-3cd3-4d20-bd0e-6a143fa37869);
DB_KAP_Bottle_Alcohol(CONS_GEN_Alcohol_Bottle_Rich_A_2a0e186c-8589-45b9-8bdd-994503d3d1cb);
DB_KAP_Bottle_Alcohol(CONS_Drink_Rum_B_733d5d97-97ed-4918-bc2a-e6dd75cde58c);
DB_KAP_Bottle_Alcohol(CONS_GEN_Alcohol_Bottle_Cheap_C_325eb33f-47a7-41e2-8e92-5e52346c3fc6);
DB_KAP_Bottle_Alcohol(CONS_GEN_Alcohol_Bottle_Cheap_A_41b870c5-1c4b-4bcb-ae29-49b7b0ad6af5);
DB_KAP_Bottle_Alcohol(CONS_GEN_Alcohol_Bottle_Cheap_B_829f190b-e54b-4dfa-96c5-a554ac79518e);
DB_KAP_Bottle_Alcohol(CONS_GEN_Alcohol_Bottle_Normal_A_97422db7-ab9e-42ab-8026-ac86a8e30e56);
DB_KAP_Bottle_Alcohol(CONS_Drink_Rum_A_f4ced9b8-6da3-4cd7-a3e0-a1a0d5058ec4);

// Wine, need 2 for Catalyst
DB_KAP_Bottle_Wine(CONS_Drink_Wine_A_Wicker_3525b96e-81ef-4411-960a-b1b305e139c6);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_F_e4360d5a-a922-4411-bf45-1cc4e45f3969);
DB_KAP_Bottle_Wine(CONS_GEN_Alcohol_Bottle_Normal_C_47f13638-1154-4a61-8dbd-1ea7ee887cbb);
DB_KAP_Bottle_Wine(CONS_GEN_Alcohol_Bottle_Normal_B_1c674a73-7855-4d8c-951d-4c289993edfa);
DB_KAP_Bottle_Wine(CONS_GEN_Alcohol_Bottle_Normal_F_f83e26c4-5a16-4282-9d84-1cdf71def753);
DB_KAP_Bottle_Wine(CONS_GEN_Alcohol_Bottle_Cheap_D_b6e4ab1f-6a0e-47fa-bc02-30a0b142bca6);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_E_Wicker_f703b4a2-900a-4e37-9571-3e18d2f4dede);
DB_KAP_Bottle_Wine(CONS_GEN_Alcohol_Bottle_Normal_D_2553da92-6bc7-4dc7-bbf9-7f1ac6d82b28);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_A_2bfa8ee0-33ef-4fd6-9262-436b5bb0d3ff);
DB_KAP_Bottle_Wine(UNI_UND_NarrativeLoot_BlingdenstoneWine_ba0a465a-f438-41ca-93bc-dacd63421344);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_H_e4595365-03f3-46ac-b989-f01bacf6cf3b);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_I_b9b6fb26-0c0f-4ad2-8949-f29caaae25b6);
DB_KAP_Bottle_Wine(CONS_Drink_Valuable_BaalorAle_Bottle_A_9f5b8cd1-ef04-4f33-ba82-27eaa6b4a123);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_F_Wicker_159b7414-2eff-4ae3-92f6-89e99cd87f50);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_Pitcher_A_27f5f392-7d66-4929-a50d-a33f00fbf4b7);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_Pitcher_B_ec35918f-1856-45ec-a92e-cbd5a6c80411);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_Pitcher_C_9d61938a-0ea8-42f6-81ab-f35860ac815a);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_Pitcher_D_9cda864e-dbac-44e3-9fe2-0562815e1004);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_C_97509a4d-13a9-4ffa-b699-20fa07d7295f);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_G_ba6424eb-5f8e-44f8-ae60-96c5b615e67f);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_Bottle_A_2a176188-5a1c-4e70-9be9-ca55502d00b2);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_B_870caf9b-f767-4264-9d0a-2c3a88dc0565);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_E_75ec6992-b6a7-4435-b373-8b298fe68e28);
DB_KAP_Bottle_Wine(CONS_Drink_Valuable_Marsember_Ice_Wine_5e4f92fb-b64a-4a8e-a1d5-a9165526fe14);
DB_KAP_Bottle_Wine(CONS_Drink_FireWine_68feae6a-e244-4302-9694-2efb89b5783c);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_D_1be0fe60-4aa2-4941-a48b-130b334bddb5);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_C_Wicker_1de26672-10cb-4659-9b0a-18b9a5bddc8c);
DB_KAP_Bottle_Wine(CONS_Drink_Wine_B_Wicker_c9cf7e80-679e-4c30-98ac-4bd43db95294);

DB_KAP_NeedSpentCountByType("Wine",2);
DB_KAP_NeedSpentCountByType("Alcogol",1);
KBSECTION
// FIRST CHECK 
IF
RequestCanCombine(_Player,_Lab,_Slot1,_,_,_,_RequestID)
AND
GetTemplate(_Lab, _LabTemplate)
AND
DB_KAP_DistilationSet(_LabTemplate)
AND
GetStatString(_Slot1, _Slot1Stat)
AND
_Slot1Stat == "OBJ_Laboratory_Glass"
AND
QRY_KAP_Clear_Old_DistilateVariables()
THEN
SetDualEntityEvent(_Player,_Player,"START RequestCanCombine");
DB_KAP_Current_Lab(_Lab,_Player,NULL_00000000-0000-0000-0000-000000000000); // need for PROC_KAP_Create_Result
DB_KAP_Current_Distilate(_Player,_Lab,_Slot1);
IterateInventory(_Slot1,"KAP_Collect_Ingredients_For_Catalyst","KAP_Collect_Ingredients_For_Catalyst_Finish");

// -----------------------------------------------------------------------------------------
// COLLECT_INGREDIENTS
// We go through the inventory of slot one by one and collect available ingredients into the base
// -----------------------------------------------------------------------------------------
//REGION COLLECT_INGREDIENTS
//
// Collect water
IF
EntityEvent((ITEM)_Item,"KAP_Collect_Ingredients_For_Catalyst")
AND
GetTemplate(_Item,(ITEMROOT)_ItemTemplate)
AND
DB_KAP_Bottle_Water(_ItemTemplate)
AND
GetStackAmount(_Item, _Amount,_)
AND
QRY_KAP_Catalyst_Ingredients_Add("Water",_ItemTemplate,_Amount)
THEN
DB_NOOP(1);
//
// Collect alcogol
IF
EntityEvent((ITEM)_Item,"KAP_Collect_Ingredients_For_Catalyst")
AND
GetTemplate(_Item,(ITEMROOT)_ItemTemplate)
AND
DB_KAP_Bottle_Alcohol(_ItemTemplate)
AND
GetStackAmount(_Item, _Amount,_)
AND
QRY_KAP_Catalyst_Ingredients_Add("Alcogol",_ItemTemplate,_Amount)
THEN
DB_NOOP(1);
//
// Collect wine
IF
EntityEvent((ITEM)_Item,"KAP_Collect_Ingredients_For_Catalyst")
AND
GetTemplate(_Item,(ITEMROOT)_ItemTemplate)
AND
DB_KAP_Bottle_Wine(_ItemTemplate)
AND
GetStackAmount(_Item, _Amount,_)
AND
QRY_KAP_Catalyst_Ingredients_Add("Wine",_ItemTemplate,_Amount)
THEN
DB_NOOP(1);
// 
// ADD INGREDIENTS TO DB_KAP_CatalystIngredients
// Existed ingredients
QRY
QRY_KAP_Catalyst_Ingredients_Add((STRING)_Type,(ITEMROOT)_ItemTemplate,(INTEGER)_Amount)
AND
DB_KAP_CatalystIngredients(_Index,_Type,_ItemTemplate,_CollectedAmount)
AND
IntegerSum(_CollectedAmount, _Amount, _NewAmount)
THEN
NOT DB_KAP_CatalystIngredients(_Index,_Type,_ItemTemplate,_CollectedAmount);
DB_KAP_CatalystIngredients(_Index,_Type,_ItemTemplate,_NewAmount);
DB_KAP_IngredientCountByType(_Type,_NewAmount);
// 
// New ingredients
QRY
QRY_KAP_Catalyst_Ingredients_Add((STRING)_Type,(ITEMROOT)_ItemTemplate,(INTEGER)_Amount)
AND
NOT DB_KAP_CatalystIngredients(_,_Type,_ItemTemplate,_)
AND
Random(100000,_RandomIndex)
THEN
DB_KAP_CatalystIngredients(_RandomIndex,_Type,_ItemTemplate,_Amount);
DB_KAP_IngredientCountByType(_Type,_Amount);

//END_REGION

//
// START COMBINE
//
// ERROR IF NOT INGREDIENTS
IF
Combined(_Lab,_Slot1,_,_,_,_Player,_LabCombinedResult)
AND
GetTemplate(_Lab, _LabTemplate)
AND
DB_KAP_DistilationSet(_LabTemplate)
AND
NOT DB_Singleton("DB_KAP_StartCombined_Error",1)
AND
DB_KAP_Current_Distilate(_Player,_Lab,_Slot1)
AND
NOT QRY_KAP_EnoughIngredients()
THEN
ApplyStatus(_Player, "KAP_MESSAGE_ERROR_NOT_DISTILATE", 6.0, 1);
RequestDelete((ITEM)_LabCombinedResult);
//
// START
IF
Combined(_Lab,_Slot1,_,_,_,_Player,_LabCombinedResult)
AND
GetTemplate(_Lab, _LabTemplate)
AND
DB_KAP_DistilationSet(_LabTemplate)
AND
NOT DB_Singleton("DB_KAP_StartCombined_Error",1)
AND
QRY_KAP_EnoughIngredients()
THEN
PROC_KAP_StartCatalystMaking();
PROC_KAP_Try_Create_Result();
PROC_KAP_Try_Remove_Spented();
ObjectTimerLaunch(_LabCombinedResult, "KAP_DeleteLabCombinedResult_Timer", 5);
//
//
// Start making by water 
PROC
PROC_KAP_StartCatalystMaking()
AND
DB_KAP_CatalystIngredients(_Index,"Water",_WaterTemplate,_WaterAmount)
THEN
PROC_KAP_ProcessWaterStack(_Index,_WaterAmount);
//
// CYCLE
// Process water in stack by one
PROC
PROC_KAP_ProcessWaterStack((INTEGER)_Index,(INTEGER)_Stack)
AND
IntegerSubtract(_Stack, 1, _NewStack)
AND
_NewStack >= 0
THEN
DB_Singleton("DB_KAP_CatalystReadyForRegisterResult",0);
DB_Singleton("DB_KAP_CatalystSpentedCount",0);
SysClear("DB_KAP_CatalystDrinkForThisWater", 3);
DB_Singleton("DB_KAP_CurrentWaterIndex",_Index);
PROC_KAP_CatalystCollectDrinks("Wine"); // first to process all wine
PROC_KAP_CatalystCollectDrinks("Alcogol"); // then alcogol
PROC_KAP_CatalistTryRegisterResult();
PROC_KAP_ProcessWaterStack(_Index,_NewStack); // CYCLE by stack
//
// If the wine is finished, then we clean the collected DB_KAP_CatalystDrinkForThisWater and DB_KAP_CatalystSpentedCount
PROC
PROC_KAP_CatalystCollectDrinks((STRING)_CurrentType) 
AND
NOT DB_Singleton("DB_KAP_CatalystReadyForRegisterResult",1)
AND
DB_KAP_CatalystDrinkForThisWater(_Index,_CountForSpent,_ProcessingType)
AND
_CurrentType != _ProcessingType
THEN
SysClear("DB_KAP_CatalystDrinkForThisWater", 3);
DB_Singleton("DB_KAP_CatalystSpentedCount",0);
//
// 
PROC
PROC_KAP_CatalystCollectDrinks((STRING)_Type)
AND
NOT DB_Singleton("DB_KAP_CatalystReadyForRegisterResult",1)
AND
DB_KAP_CatalystIngredients(_Index,_Type,_Template,_Amount)
AND
DB_KAP_NeedSpentCountByType(_Type,_NeedAmout)
AND
QRY_KAP_CatalystNeedAnotherSpent(_NeedAmout,_Amount)
THEN
PROC_KAP_IncreaseSpentedCount(_Index,_Type);
//
//
QRY
QRY_KAP_CatalystNeedAnotherSpent((INTEGER)_NeedAmout,(INTEGER)_Amount)
AND
DB_Singleton("DB_KAP_CatalystSpentedCount",_SpentedCount)
AND
_SpentedCount < _NeedAmout
AND
QRY_KAP_SetCatalistCountForSpent(_NeedAmout,_SpentedCount,_Amount)
THEN
DB_NOOP(1);
//
// We calculate how much we spend
QRY
QRY_KAP_SetCatalistCountForSpent((INTEGER)_NeedAmout,(INTEGER)_SpentedCount,(INTEGER)_Amount)
THEN
DB_Singleton("DB_KAP_CatalistCountForSpent",0);
//-----------------------------------------------------------------
QRY
QRY_KAP_SetCatalistCountForSpent((INTEGER)_NeedAmout,(INTEGER)_SpentedCount,(INTEGER)_Amount)
AND
IntegerSubtract(_NeedAmout,_SpentedCount,_Missing)
AND
_Missing <= _Amount
THEN
DB_Singleton("DB_KAP_CatalistCountForSpent",_Missing);
//-----------------------------------------------------------------
QRY
QRY_KAP_SetCatalistCountForSpent((INTEGER)_NeedAmout,(INTEGER)_SpentedCount,(INTEGER)_Amount)
AND
IntegerSubtract(_NeedAmout,_SpentedCount,_Missing)
AND
_Missing > _Amount
THEN
DB_Singleton("DB_KAP_CatalistCountForSpent",_Amount);
//
//
PROC
PROC_KAP_IncreaseSpentedCount((INTEGER)_Index,(STRING)_Type)
AND
DB_Singleton("DB_KAP_CatalystSpentedCount",_SpentedCount)
AND
DB_Singleton("DB_KAP_CatalistCountForSpent",_CountForSpent)
AND
IntegerSum(_SpentedCount,_CountForSpent,_NewSpentedCount)
THEN
DB_Singleton("DB_KAP_CatalystSpentedCount",_NewSpentedCount);
DB_KAP_CatalystDrinkForThisWater(_Index,_CountForSpent,_Type);
//
// If you have found the required quantity, then you are ready to register the result
PROC
PROC_KAP_IncreaseSpentedCount((INTEGER)_Index,(STRING)_Type)
AND
DB_KAP_NeedSpentCountByType(_Type,_NeedAmout)
AND
DB_Singleton("DB_KAP_CatalystSpentedCount",_SpentedCount)
AND
_SpentedCount >= _NeedAmout
THEN
DB_Singleton("DB_KAP_CatalystReadyForRegisterResult",1);
//
//
PROC
PROC_KAP_CatalistTryRegisterResult()
AND
DB_KAP_Current_Distilate(_,_Lab,_Slot1)
AND
SysCount("DB_KAP_CatalystDrinkForThisWater",3,_Amount) // not empty
AND
_Amount > 0
AND
DB_Singleton("DB_KAP_CatalystReadyForRegisterResult",1) // ready to register the result
THEN
PROC_KAP_Catalyst_Water_Remove(_Slot1);
PROC_KAP_Catalyst_Drink_Remove(_Slot1);
PROC_KAP_Register_Result(LOOT_Laboratory_Flask_Glass_B_4528c43d-f986-42ea-8189-6efedae49ba8,_Lab,1); // Register the result for later creation
//
// Remove water
PROC
PROC_KAP_Catalyst_Water_Remove((ITEM)_Slot)
AND
DB_Singleton("DB_KAP_CurrentWaterIndex",_Index)
AND
DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount)
AND
IntegerSubtract(_AvailableAmount,1,_NewAvailableAmount)
AND
QRY_KAP_Add_Ingredients_Spent(_Slot,_Template,1)
THEN
NOT DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount);
DB_KAP_CatalystIngredients(_Index,_Type,_Template,_NewAvailableAmount);
//
// If _AvailableAmount <= 0 then delete
PROC
PROC_KAP_Catalyst_Water_Remove((ITEM)_Slot)
AND
DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount)
AND
_AvailableAmount <= 0
THEN
NOT DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount);
//
// Remove drink
PROC
PROC_KAP_Catalyst_Drink_Remove((ITEM)_Slot)
AND
DB_KAP_CatalystDrinkForThisWater(_Index,_SpentCount,_Type)
AND
DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount)
AND
IntegerSubtract(_AvailableAmount,_SpentCount,_NewAvailableAmount)
AND
QRY_KAP_Add_Ingredients_Spent(_Slot,_Template,_SpentCount)
THEN
NOT DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount);
DB_KAP_CatalystIngredients(_Index,_Type,_Template,_NewAvailableAmount);
//
// If _AvailableAmount <= 0 then delete
PROC
PROC_KAP_Catalyst_Drink_Remove((ITEM)_Slot)
AND
DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount)
AND
_AvailableAmount <= 0
THEN
NOT DB_KAP_CatalystIngredients(_Index,_Type,_Template,_AvailableAmount);
//
//
// 
QRY
QRY_KAP_EnoughIngredients()
AND
DB_KAP_IngredientCountByType("Water",_WaterAmount)
AND
_WaterAmount > 0
AND
DB_KAP_IngredientCountByType("Alcogol",_AlcogolAmount)
AND
_AlcogolAmount > 0
THEN
DB_NOOP(1);
//
QRY
QRY_KAP_EnoughIngredients()
AND
DB_KAP_IngredientCountByType("Water",_WaterAmount)
AND
_WaterAmount > 0
AND
DB_KAP_IngredientCountByType("Wine",_AlcogolAmount)
AND
_AlcogolAmount > 1
THEN
DB_NOOP(1);
//
//
//REGION TECHNICAL
// Singleton for DB_KAP_IngredientCountByType 
//
IF
DB_KAP_IngredientCountByType(_NewType,_NewAmount)
AND
DB_KAP_IngredientCountByType(_OldType,_OldAmount)
AND
_NewType == _OldType
AND
_NewAmount != _OldAmount
THEN
NOT DB_KAP_IngredientCountByType(_OldType,_OldAmount);
//
//
// QRY for clear db on start combine
QRY
QRY_KAP_Clear_Old_DistilateVariables()
THEN
SysClear("DB_KAP_IngredientCountByType", 2);
SysClear("DB_KAP_CatalystIngredients", 4);
SysClear("DB_KAP_Current_Distilate", 3);
//END_REGION












EXITSECTION

ENDEXITSECTION
ParentTargetEdge "GLO_KelaAlchemyProject"
